{"./":{"url":"./","title":"介绍","keywords":"","body":"Gitbook 使用教程支持格式Gitbook项目地址本项目地址Gitbook 使用教程 使用 Git 和 Markdown 制作在线电子书与知识总结。 支持格式 GitBook支持输出多种文档格式，如： 静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上； PDF：需要安装ebook-concert依赖； eBook：需要安装ebook-concert； 单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程； JSON：一般用于电子书的调试或元数据提取。 Gitbook项目地址 GitBook项目官网：http://www.gitbook.io GitBook Github地址：https://github.com/GitbookIO/gitbook Gitbook Docs https://docs.gitbook.com/ 本项目地址 仓库：https://github.com/tkspuk/tutorial_gitbook 在线阅读：https://byto.top/tutorial_gitbook 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap1_installation/":{"url":"chap1_installation/","title":"基本安装","keywords":"","body":"基本安装本地安装基本安装 这一章主要讲 Gitbook 的环境及安装，以及命令行的使用概览。 本地安装 在本地安装 gitbook 命令非常简单，本地系统需要依赖 NodeJS v4.0 及以上 系统需要满足 Windows, Linux, Unix, or Mac OS X 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap1_installation/nodejs-install.html":{"url":"chap1_installation/nodejs-install.html","title":"Node.js安装","keywords":"","body":"Node.js安装Node.js安装 Image - Node.js Node.js是一个基于Chrome Javascript运行时建立的一个平台，用来方便的搭建快速的，易于扩展的网络应用。 Node.js借助事件驱动，非阻塞I/O模型变得轻量和高效，非常适合run across distributed devices的data-intensivede 的实时应用。 Node.js的安装，请参考： nodejs官网下载然后傻瓜安装即可 在 Linux 中安装 Nodejs 安装完成之后，可以通过下面的命令来验证一下Node.js是否安装成功。 $ node -v v12.1.0 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap1_installation/gitbook-install.html":{"url":"chap1_installation/gitbook-install.html","title":"Gitbook命令安装","keywords":"","body":"Gitbook命令安装Gitbook命令安装 Gitbook是使用NPM来进行安装的，可以在命令行中输入下面的命令进行安装： $ npm install gitbook-cli -g 安装完成之后，你可以使用下面的命令来检验是否安装成功 $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 如果你看到了上面类似的版本信息，则表示你已经安装成功了。 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap1_installation/gitbook-cli.html":{"url":"chap1_installation/gitbook-cli.html","title":"Gitbook命令行速览","keywords":"","body":"Gitbook命令行使用初始化编辑电子书本地预览发布电子书查看帮助Gitbook命令行使用 Gitbook是一个命令行工具，使用方法： 初始化 初始化一本书 gitbook init 在使用 gitbook init 之后本地会生成两个文件 README.md 和 SUMMARY.md ，这两个文件都是必须的，一个为介绍，一个为目录结构。 编辑电子书 首先，GitBook使用SUMMARY.md文件组织整个内容的目录，比如可以新建 Faq.md 文件，来记录常见问题，并在 SUMMARY.md 文件中添加目录。 # Summary * [简介](README.md) * [常见问题](Faq.md) 本地预览 当内容书写完毕后，可以在终端中输入如下命令，实现实时预览 gitbook serve gitbook serve ./ {book_name} gitbook serve 命令实际会先调用 gitbook build 编译书籍，完成后打开 web 服务器，默认监听本地 4000 端口，在浏览器打开 http://localhost:4000 即可浏览电子书。 发布电子书 gitbook build gitbook build ./ {book_name} --output=./{outputFolde} gitbook build ./ --log=debug --debug 当电子书内容制作好之后，可以使用如下命令来生成 HTML 静态网页版电子书。该命令会在当前文件夹中生成 _book 文件夹，这个文件夹中的内容就是静态网页版电子书。 使用 --log=debug --debug 可以用来调试，会打印出 stack trace。 查看帮助 $ gitbook -h Usage: gitbook [options] [command] Commands: build [options] [source_dir] Build a gitbook from a directory serve [options] [source_dir] Build then serve a gitbook from a directory install [options] [source_dir] Install plugins for a book pdf [options] [source_dir] Build a gitbook as a PDF epub [options] [source_dir] Build a gitbook as a ePub book mobi [options] [source_dir] Build a gitbook as a Mobi book init [source_dir] Create files and folders based on contents of SUMMARY.md publish [source_dir] Publish content to the associated gitbook.io book git:remote [source_dir] [book_id] Adds a git remote to a book repository Options: -h, --help output usage information -V, --version output the version number 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap2_content/":{"url":"chap2_content/","title":"电子书目录结构","keywords":"","body":"图书项目结构目录结构多语言图书项目结构 README.md和SUMMARY.md是Gitbook项目必备的两个文件，也就是一本最简单的gitbook也必须含有这两个文件，它们在一本Gitbook中具有不同的用处。 目录结构 Gitbook 使用简单的目录结构 . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md 简单的介绍下每个文件的作用 File 作用描述 book.json 记录电子书的配置 README.md 前言 或者 电子书的介绍 必须 SUMMARY.md 电子书的目录 GLOSSARY.md 术语表 ，可选 多语言 当使用多语言时，为每一种语言建立一个子目录，然后需要额外根目录建立一个文件 LANGS.md # Languages * [English](en/) * [French](fr/) * [Español](es/) 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap2_content/basic.html":{"url":"chap2_content/basic.html","title":"README.md 与 SUMMARY编写","keywords":"","body":"README.md 与 SUMMARY编写使用语法README.mdSUMMARY.mdREADME.md 与 SUMMARY编写 使用语法 在Gitbook中所有文字的编写都使用Markdown语法。 README.md 这个文件相对于是一本Gitbook的简介，比如我们这本书的README.md : # Gitbook 使用入门 > GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书。 本书将简单介绍如何安装、编写、生成、发布一本在线图书。 SUMMARY.md 这个文件相对于是一本书的目录结构。比如我们这本书的SUMMARY.md : * [介绍](README.md) * [基本安装](installation/README.md) * [Node.js安装](installation/nodejs-install.md) * [Gitbook安装](installation/gitbook-install.md) * [Gitbook命令行速览](installation/gitbook-cli.md) * [图书项目结构](book/README.md) * [README.md 与 SUMMARY编写](book/file.md) * [目录初始化](book/prjinit.md) * [图书输出](output/README.md) * [输出为静态网站](output/static.md) * [输出PDF](output/pdfandebook.md) * [发布](publish/README.md) * [发布到Github Pages](publish/gitpages.md) * [发布到公司文档服务器](publish/companyserver.md) * [结束](end/README.md) SUMMARY.md基本上是列表加链接的语法。链接中可以使用目录，也可以使用。 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap2_content/multi-summary.html":{"url":"chap2_content/multi-summary.html","title":"目录初始化","keywords":"","body":"目录初始化多级目录锚点标记目录初始化 当SUMMARY.md创建完毕之后，我们可以使用Gitbook的命令行工具将这个目目录结构生成相应地目录及文件 我们可以看到，gitbook给我们生成了与SUMMARY.md所对应的目录及文件。 每个目录中，都有一个README.md文件，用于描述这一章的说明。 多级目录 Gitbook 使用 SUMMARY.md 文件来实现目录结构，通过该文件可以实现多级目录效果，如： * [第一章](section1/README.md) * [第一节](section1/example1.md) * [第二节](section1/example2.md) * [第二章](section2/README.md) * [第一节](section2/example1.md) md 文件可以存放在子文件夹中，另外需要注意的是 Gitbook 目录结构限定为三级。 用户还可以通过标题或者水平分割线将 Gitbook 目录分为不同的部分，比如 # Summary ### 第一部 * [Introduction](README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) ### 第二部 * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) ---- * [Last part without title](part3/title.md) 锚点标记 目录结构中也可以直接指向文件中的锚点标记，让目录结构更加清晰 # Summary ### Part I * [Part I](part1/README.md) * [Writing is nice](part1/README.md#writing) * [GitBook is nice](part1/README.md#gitbook) * [Part II](part2/README.md) * [We love feedback](part2/README.md#feedback) * [Better tools for authors](part2/README.md#tools) 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap2_content/file-ignore.html":{"url":"chap2_content/file-ignore.html","title":"忽略文件","keywords":"","body":"忽略文件忽略文件 任何在文件夹下的文件，在最后生成电子书时都会被拷贝到输出目录中，如果想要忽略某些文件，和 Git 一样， Gitbook 会依次读取 .gitignore, .bookignore 和 .ignore 文件来将一些文件和目录排除。比如，在 .gitignore 中： # This is a comment # Ignore the file test.md test.md # Ignore everything in the directory \"bin\" bin/* 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap2_content/configuration.html":{"url":"chap2_content/configuration.html","title":"配置文件","keywords":"","body":"配置reference配置 这里主要讲 book.json 的配置及参数，gitbook 使用该文件来配置整本书的基本信息，结构，使用的插件等等信息，这是一个非常重要的配置文件。 这个配置文件使用 json 格式，配置非常简单，参考官方解释即可。 reference 这是我的book.json的配置 { \"title\": \"Locus's Notebook\", \"author\": \"locus\", \"description\": \"学习知识，总结经验\", \"keywords\": \"markdown,gitbook,\", \"language\": \"zh-hans\", \"styles\": { \"website\": \"./styles/website.css\" }, \"structure\": { \"readme\": \"README.md\" }, \"introduction\": { \"path\": \"README.md\", \"title\": \"Gitbook使用入门概述\" }, \"links\": { \"home\": false, \"about\": false, \"issues\": false, \"contribute\": false, \"sidebar\": { \"我的Blog\": \"https://byto.top\" } }, \"plugins\": [ \"editlink\", \"splitter\", \"image-captions\", \"expandable-chapters-small\", \"github\", \"github-buttons\", \"donate\", \"anchor-navigation-ex\", \"favicon\", \"multipart\", \"codeblock-filename\", \"localized-footer\", \"-lunr\", \"-search\", \"search-pro\", \"sitemap\", \"highlight\" ], \"pluginsConfig\":{ \"theme-default\": { \"showLevel\": true }, \"anchor-navigation-ex\": { \"showLevel\": false }, \"editlink\": { \"base\": \"https://github.com/tkspuk\", \"label\": \"编辑本页\", \"multilingual\": false }, \"image-captions\": { \"caption\": \"Image - _CAPTION_\", \"align\": \"center\" }, \"expandable-chapters-small\": {}, \"github\": { \"url\": \"https://github.com/tkspuk\" }, \"github-buttons\": { \"buttons\": [{ \"user\": \"tkspuk\", \"repo\": \"mybook\", \"type\": \"star\", \"size\": \"small\", \"count\": true } ] }, \"sitemap\": { \"hostname\": \"https://byto.top/\" }, \"search-pro\": { \"cutWordLib\": \"nodejieba\" }, \"donate\": { \"wechat\": \"./imgs/wechat.png\", \"title\": \"对你有帮助\", \"button\": \"赞赏\", \"WeChatText\": \"感谢感谢\" }, \"localized-footer\": { \"hline\": true, \"filename\": \"./FOOTER.md\" }, \"pdf\": { \"toc\": true, \"pageNumbers\": true, \"fontSize\": 12, \"paperSize\": \"a4\", \"margin\": { \"right\": 62, \"left\": 62, \"top\": 36, \"bottom\": 36 } }, \"favicon\":{ \"shortcut\": \"./source/images/favicon.jpg\", \"bookmark\": \"./source/images/favicon.jpg\", \"appleTouch\": \"./source/images/apple-touch-icon.jpg\", \"appleTouchMore\": { \"120x120\": \"./source/images/apple-touch-icon.jpg\", \"180x180\": \"./source/images/apple-touch-icon.jpg\" } } } } 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap2_content/cover.html":{"url":"chap2_content/cover.html","title":"封面","keywords":"","body":"封面封面 gitbook 的封面可以通过插件auto cover自动生成，也可以自己配置。 如果要使用自定义的封面，在书籍的根目录下放置 cover.jpg，如果想要缩略图可以放置 cover_small.jpg，文件格式必须为 jpg。 一个好的封面需要: 大小要求 cover.jpg 1800x2360 pixels , cover_small.jpg 200x262 不要有边框 有清晰的标题 任何小的标题需要清晰可见 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap3_plugins/":{"url":"chap3_plugins/","title":"插件","keywords":"","body":"常用的插件安装插件常用的插件修改页面样式功能增强统计常用的插件 可以通过 Gitbook 的插件来扩展 Gitbook 的功能，现有的 Gitbook 插件能够实现数学公式，Google 统计，评论等等功能。 安装插件 Gitbook 安装插件比较简单，需要在项目下添加 book.json 文件，然后在其中添加 { \"plugins\": [\"plugins1\", \"plugins2\"], \"pluginsConfig\": { \"plugins1\": {} } } 注册完插件之后，可以通过下面的命令来安装插件 gitbook install 常用的插件 修改页面样式 editlink 顶部显示编辑此页 image captions 抓取图片中 alt 或者 title 属性显示在图片下 anchors 标题带有锚点 splitter 侧边栏可以调解宽度 localized-footer 为 Gitbook 每一个页面添加页脚 Expandable-chapters-small 使左侧的章节目录可以折叠 功能增强 disqus Disqus 评论插件 Search Plus 增强搜索，支持中文 Sharing Plus 分享增强 KaTex 支持数学公式 Chart 绘制图形 rss 添加 rss 订阅功能 Edit Link 链接到当前页源文件上 Donate 打赏插件 Github Buttons - 添加项目在 Github 上的 star、fork、watch 信息 Advanced Emoji - 支持 emoji 表情 Favicon - 更改网站的 favicon.ico Sitemap-general - 生成sitemap 统计 ga Google统计 3ba 百度统计 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap3_plugins/disqus.html":{"url":"chap3_plugins/disqus.html","title":"评论插件","keywords":"","body":"添加评论添加评论 用于添加评论 \"plugins\": [ \"disqus\" ], \"pluginsConfig\": { \"disqus\": { \"shortName\": \"gitbook-tutorial\" } } 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap3_plugins/hightlight.html":{"url":"chap3_plugins/hightlight.html","title":"代码高亮","keywords":"","body":"代码高亮代码高亮 使用 Prism.js 为语法添加高亮显示，需要将 highlight 插件去掉。 地址： https://plugins.gitbook.com/plugin/prism https://plugins.gitbook.com/plugin/prism-themes { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prism-themes/themes/prism-base16-ateliersulphurpool.light.css\" ] } } } 如果需要修改背景色、字体大小等，可以在 website.css 定义 pre[class*=\"language-\"] 类来修改，下面是一个示例： pre[class*=\"language-\"] { border: none; background-color: #f7f7f7; font-size: 1em; line-height: 1.2em; } 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap3_plugins/splitter.html":{"url":"chap3_plugins/splitter.html","title":"垂直条","keywords":"","body":"代码高亮插件地址代码高亮 该插件提供了一个垂直条，用于划分摘要和主要内容。 插件地址 splitter 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap4_output/":{"url":"chap4_output/","title":"电子书输出","keywords":"","body":"图书输出图书输出 目前为止，Gitbook 支持如下输出： 静态HTML，可以看作一个静态网站 PDF格式 eBook格式 单个HTML文件 JSON格式 我们这里着重说下如何输出静态的HTML和PDF文件。 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap4_output/static.html":{"url":"chap4_output/static.html","title":"输出为静态网站","keywords":"","body":"输出为静态网站本地预览是自动生成使用gitbook build参数输出为静态网站 你有两种方式输出一个静态的网站： 本地预览是自动生成 当你编辑好 gitbook 文档之后，你可以使用 gitbook 的命令来进行本地预览。 $ gitbook serve ./{book_name} gitbook会启动一个4000端口用于预览。 比如，通过gitbook serve来预览本文档： $ gitbook serve gitbook-howtouse Press CTRL+C to quit ... Live reload server started on port: 35729 Starting build ... Successfully built! Starting server ... Serving book on http://localhost:4000 你可以你的浏览器中打开这个网址： http://localhost:4000 Image - gitbook serve preview 你会发现，在你编辑的gitbook项目的目录中会多一个_book目录，而这个目录中就是生成的本地预览的静态网站内容。 使用gitbook build参数 与直接预览生成的静态网站不一样的时，使用这个命令，你可以将内容输出到你想要的目录。如果不使用 --output 参数则默认在当前文件夹下 $ gitbook build --output=/tmp/gitbook Starting build ... Successfuly built ! $ ls /tmp/gitbook/ howtouse search_index.json book imgs output gitbook index.html publish 无论哪种方式，你都可以将这个静态网站打包，发布到你想要发布的服务器上，或者直接将这个打包文件给阅读者。 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap4_output/pdf.html":{"url":"chap4_output/pdf.html","title":"输出PDF","keywords":"","body":"输出为PDF安装calibre插件输出为PDF 输出为PDF文件，需要先安装gitbook pdf $ npm install gitbook-pdf -g 如果在安装gitbook-pdf时，觉得下载phantomjs包太慢的话，你可以到phantomjs的官方网站上去下载。 http://phantomjs.org/ 这个包的安装方式，参考其官网的说明文档。 然后，用下面的命令就可以生成PDF文件了。 $ gitbook pdf 如果，你已经在编写的gitbook当前目录，也可以使用相对路径。 $ gitbook pdf . 然后，你就会发现，你的目录中多了一个名为book.pdf的文件。 安装calibre插件 玩过kindle的都知道，calibre是一款非常方便的开源电子书转换软件。在这里，我们也是用到ebook-convert这个插件。 首先在calibre官网下载插件，下载链接：Calibre_download。下载适合自己系统的版本。 下载到电脑之后我做了很多尝试，刚下载之后我兴冲冲的去使用gitbook pdf . mypdf.pdf指令，结果发现提示ebook-convert未安装。 将安装的calibre放在系统应用中，然后将app添加到path中。 执行一个命令 sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin 执行完成之后，重新进入书籍目录。 $ cd jianli $ gitbook pdf . jianli.pdf info: 7 plugins are installed info: 6 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 1 pages info: found 7 asset files info: >> generation finished with success in 7.5s ! info: >> 1 file(s) generated 执行完以上代码，进入书籍目录，即可看到已经转换完成的PDF了。大功告成！ 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap5_publish/":{"url":"chap5_publish/","title":"发布","keywords":"","body":"发布发布 可以使用Github Pages服务将我们写的Gitbook发布到互联网上，前提是你已经了解了Git、Github及Github Pages的使用。 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap5_publish/gitpages.html":{"url":"chap5_publish/gitpages.html","title":"发布到Github Pages","keywords":"","body":"发布到Github Pages发布方式方法一：使用项目docs目录提供服务方法二：使用项目gh-pages分支提供服务手动创建仓库与分支基于Travis的自动化发布Github Pages发布到Github Pages 发布方式 将gitbook书籍发布到github有以下两种方法： 方法一: md源文件与html文件放在同一个仓库，并且都存储在master分支，html发布在docs文件夹下，然后在github上进行设置 方法二: 将md文件与Github Pages静态文件存放在一个仓库中。md文件为master分支，而html文件为 gh-pages分支。 方法一：使用项目docs目录提供服务 登陆到Github，创建一个新的仓库，名称我们就命名为tutorial_gitbook，这样我就得到一个tutorial_gitbook仓库。 gitbook书籍本地文件夹执行git init初始化git 添加远端分支git remote add origin https://github.com/tkspuk/tutorial_gitbook.git 将本地资料push到仓库： git config user.name \"John Doe\" git config user.email johndoe@example.com git add --all git commit -m \"first commit\" git push -u origin master 点击这个仓库的Settings，找到GitHub Pages配置选项，在Source配置中选择master branch/docs folder选项，大功告成。 经过上述步骤，Github会自动为你分配一个网址。 http://USERNAME.github.io/tutorial_gitbook 未来修改书籍发布仅需要以下两个命令 gitbook build ./ docs git add --all git commit -m \"some update\" git push -u origin master 方法二：使用项目gh-pages分支提供服务 除了上面的直接发布静态文件到Github Pages的方法以外，还可以使用一个单独的项目的Github Pages功能。 手动创建仓库与分支 登陆到Github，创建一个新的仓库，名称我们就命名为tutorial_gitbook，这样我就得到一个tutorial_gitbook仓库。 克隆仓库到本地： git clone git@github.com:/USER_NAME/tutorial_gitbook.git 创建一个新分支： git checkout -b gh-pages，注意，分支名必须为gh-pages。 将分支push到仓库： git push -u origin gh-pages。 切换到主分支：git checkout master。 经过这一步处理，我们已经创建了gh-pages分支了，有了这个分支，Github会自动为你分配一个网址。 http://USERNAME.github.io/tutorial_gitbook 你可以在项目页面右下角setting中看到： Image - Github Pages 基于Travis的自动化发布Github Pages 下面将介绍使用一个仓库托管源码，而使用 Travis 自动将静态网站发布到 gh-pages 分支中。这样就可以避免提交源码的同时，还需要同步一遍 gh-pages 分支。 domenic 制作了一个脚本，当 master 分支更新时，自动使用 CI Travis 拉取更新，然后和 gh-pages 分支做比较，如果有差异了，自动将 master 分支的修改提交到 gh-pages 分支。 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap5_publish/file.html":{"url":"chap5_publish/file.html","title":"发布到文件","keywords":"","body":"发布到文件发布到文件 可以在本地运行如下命令来分别生成 pdf, epub, mobi 格式文件 gitbook pdf . gitbook epub . gitbook mobi . 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "},"chap6_end/":{"url":"chap6_end/","title":"结束","keywords":"","body":"结语结语 Gitbook 初次尝试还是非常不错的，结合 GitHub 网站能够快速托管自己的电子书。不管是用来自己做笔记还是真的用来写小说，或者正式的写作，大概是一个不错的代替方案。 关于 Markdown 的语法规则，可以参考 http://einverne.github.io/markdown-style-guide/zh.html 由 Locus 通过 知识共享 署名-相同方式共享 4.0协议发布 "}}